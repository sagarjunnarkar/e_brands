require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/contributors", type: :request do
  let!(:admin) { FactoryBot.create(:admin) }
  let!(:contributor_user) { FactoryBot.create(:contributor_user, email: 'c@e.com', invited_by_id: admin.id) }
  let!(:contributor_user2) { FactoryBot.create(:contributor_user, email: 'c2@e.com', invited_by_id: admin.id) }
  let!(:company) { FactoryBot.create(:company) }
  # This should return the minimal set of attributes required to create a valid
  # Contributor. As you add validations to Contributor, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {company_id: company.id, user_id: contributor_user.id}
  }

  let(:invalid_attributes) {
    { invalid: 1 }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ContributorsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    { "CONTENT_TYPE" => "application/json", 'Authorization': "Bearer #{admin.generate_jwt}" }
  }

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Contributor" do
        expect {
          post contributors_url,
               params: { contributor: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Contributor, :count).by(1)
      end

      it "renders a JSON response with the new contributor" do
        post contributors_url,
             params: { contributor: valid_attributes.merge(user_id: contributor_user2.id) }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Contributor" do
        expect {
          post contributors_url,
               params: { contributor: invalid_attributes }, as: :json
        }.to change(Contributor, :count).by(0)
      end

      it "renders a JSON response with errors for the new contributor" do
        post contributors_url,
             params: { contributor: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end
end
